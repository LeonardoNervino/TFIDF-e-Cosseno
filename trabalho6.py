# -*- coding: utf-8 -*-
"""Trabalho6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lpTSme7jkV4yMHVvdGZBpTkPDf0tebGp
"""

'''  Aluno: Leonardo Nervino Friedrich

Tarefa 6 - TFIDF e Cosseno


1. Sua tarefa será gerar a matriz termo-documento usando TF-IDF por meio da aplicação das 
fórmulas  TF-IDF  na  matriz  termo-documento  criada  com  a  utilização  do  algoritmo  Bag of 
Words. Sobre o Corpus que recuperamos anteriormente. O entregável desta tarefa é uma 
matriz termo-documento onde a primeira linha são os termos e as linhas subsequentes são 
os vetores calculados com o TF-IDF. 
2. Sua tarefa será gerar uma matriz de distância, computando o cosseno do ângulo entre todos 
os vetores que encontramos usando o tf-idf. Para isso use a seguinte fórmula para o cálculo 
do  cosseno  use  a  fórmula  apresentada  em  Word2Vector  (frankalcantara.com) 
(https://frankalcantara.com/Aulas/Nlp/out/Aula4.html#/0/4/2)  e  apresentada  na  figura  a 
seguir:O resultado deste trabalho será uma matriz que relaciona cada um dos vetores já calculados 
com todos os outros vetores disponíveis na matriz termo-documento mostrando a distância 
entre cada um destes vetores.
Corpus
'''


from bs4 import BeautifulSoup
import requests
import string
import numpy 

text = []
textlist = []

url1 = 'https://www.wonderflow.ai/blog/natural-language-processing-examples'

html1 = requests.get(url1)                               
site1 = BeautifulSoup(html1.content, 'html.parser')      #pega o conteudo do html
pegaconteudo1 = site1.find_all("p")                      #pega todos os paragrafos do html
for url1 in pegaconteudo1:                               #pega o conteudo de cada paragrafo
  text.append(url1.get_text())                           #adiciona o conteudo de cada paragrafo em uma lista

url2 = 'https://www.cio.com/article/228501/natural-language-processing-nlp-explained.html'

html2 = requests.get(url2)                             
site2 = BeautifulSoup(html2.content, 'html.parser')    
pegaconteudo2 = site2.find_all("p")                  
for url2 in pegaconteudo2:                             
  text.append(url2.get_text())                        

url3 = 'https://www.techtarget.com/searchenterpriseai/definition/natural-language-processing-NLP'

html3 = requests.get(url3)                             
site3 = BeautifulSoup(html3.content, 'html.parser')   
pegaconteudo3 = site3.find_all("p")                    
for url3 in pegaconteudo3:                            
  text.append(url3.get_text())                       

url4 = 'https://machinelearningmastery.com/natural-language-processing/'

html4 = requests.get(url4)                             
site4 = BeautifulSoup(html4.content, 'html.parser')    
pegaconteudo4 = site4.find_all("p")                    
for url4 in pegaconteudo4:                            
  text.append(url4.get_text())                        

url5 = 'https://www.ibm.com/cloud/learn/natural-language-processing'

html5 = requests.get(url5)                            
site5 = BeautifulSoup(html5.content, 'html.parser')   
pegaconteudo5 = site5.find_all("p")                   
for url5 in pegaconteudo5:                            
  text.append(url5.get_text())                        
textlist.append(text)                                 #adiciona a lista text em uma lista

print(textlist)

"""Bag of Words"""

palavras = []                                           
numerofrases = 0                                        #numero de frases
for text in textlist:                                   #pega o conteudo de cada paragrafo da lista text
  for frase in text:                                    
    numerofrases += 1                                   #incrementa o numero de frases
    for palavra in frase.split(' '):                    
      if palavra not in palavras:                       
        palavras.append(palavra)                       
BOW = numpy.zeros((numerofrases,len(palavras)))         #cria uma matriz de zeros com o numero de frases e o numero de palavras
numerofrases = 0                                        #numero da frase atual
for text in textlist:                                   #pega o conteudo de cada paragrafo da lista text
  for frases in text:                                   
    for palavra in frases.split(' '):                   
      BOW[numerofrases][palavras.index(palavra)] += 1   
    numerofrases += 1                                   
    print(BOW)

"""TF"""

numerofrases = 0                                      
TF = numpy.zeros((len(BOW),len(BOW[0])))              
for text in textlist:                                 
  for frases in text:                                
    numerodepalavras = len(frases.split(' '))         
    for palavra in frases.split(' '):
      TF[numerofrases][palavras.index(palavra)] = BOW[numerofrases][palavras.index(palavra)] / numerodepalavras#calcula o TF
    numerofrases += 1                                 #incrementa o numero da frase atual
print(TF)                                             #imprime o TF

"""IDF"""

IDF = []                                              #lista de IDF
for palavra in range(len(palavras)):                  
  analisepalavras = 0                                 #numero de palavras analisadas
  for analisefrase in BOW:                            
    if analisefrase[palavra] > 0: analisepalavras += 1   #incrementa o numero de palavras analisadas
  IDF.append(numpy.log10(len(BOW)/analisepalavras))      #calcula o IDF
  print(IDF)                                          

"""TFIDF"""

TFIDF = numpy.zeros((len(BOW),len(BOW[0])))        #cria uma matriz de zeros com o numero de frases e o numero de palavras
for a in range(len(TFIDF)):                        
  for b in range(len(TFIDF[0])):                   
    TFIDF[a][b] = TF[a][b] * IDF[b]                
print(TFIDF)                                       

"""Similaridade de cosseno"""

arraysTFIDF = numpy.zeros((len(TFIDF),len(TFIDF)))    #cria uma matriz de zeros com o numero de frases e o numero de palavras
array = 0
for vector in TFIDF:                                  
  a = array                                           
  while a < len(TFIDF):
    distancia = numpy.dot(vector,TFIDF[a])/(numpy.linalg.norm(vector)*numpy.linalg.norm(TFIDF[a])) #calcula a distancia entre os vetores
    arraysTFIDF[array][a] = distancia                 #adiciona a distancia na matriz de distancia
    arraysTFIDF[a][array] = distancia
    array += 1
    a += 1                                            #incrementa o numero da frase atual  

print(arraysTFIDF)              #imprime a matriz de distancia